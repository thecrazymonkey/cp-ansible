---
- name: Set Principal - Sasl Scram
  set_fact:
    kafka_broker_principal: "User:{{ sasl_scram_users_final.admin.principal }}"
  when: listener['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-512'

- name: Set Principal - Sasl Scram 256
  set_fact:
    kafka_broker_principal: "User:{{ sasl_scram256_users_final.admin.principal }}"
  when: listener['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256'

- name: Set Principal - Sasl Plain
  set_fact:
    kafka_broker_principal: "User:{{ sasl_plain_users_final.admin.principal }}"
  when: listener['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN'

- name: Set Principal - Sasl Kerberos
  set_fact:
    kafka_broker_principal: "User:{{ kerberos_kafka_broker_primary }}"
  when: listener['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'

- name: Extract Common Name from BFCKS Keystore - SSL Mutual Auth
  # Examine the keystore
  # Search lines with Entry type: "PrivateKeyEntry" and return that line and all after, ca cert is of type "trustedCertEntry"
  # Search for first "Owner" line
  # Extract DNAME from line
  # Remove spaces after commas
  shell: |
    keytool -list -keystore {{kb_keystore_path}} \
        -storepass {{kb_keystore_storepass}} -v \
        -storetype BCFKS \
        -providerpath {% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}/{% else %}/usr/{% endif %}share/java/kafka/bc-fips-*.jar \
        -providerclass org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider \
        | grep PrivateKeyEntry -A1000 \
        | grep Owner -m1 \
        | cut -d ":" -f2 \
        | cut -c2- \
        | sed 's/\s*,\s*/,/g'
  register: distinguished_name_from_keystore_bfkcs
  changed_when: false
  when:
    - listener['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'none'
    - listener['ssl_enabled'] | default(ssl_enabled) | bool
    - listener['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool
    - fips_enabled | bool

- name: Extract Common Name from Keystore - SSL Mutual Auth
  # Examine the keystore
  # Search lines with Entry type: "PrivateKeyEntry" and return that line and all after, ca cert is of type "trustedCertEntry"
  # Search for first "Owner" line
  # Extract DNAME from line
  # Remove spaces after commas
  shell: |
    keytool -list -keystore {{kb_keystore_path}} \
        -storepass {{kb_keystore_storepass}} -v \
        | grep PrivateKeyEntry -A1000 \
        | grep Owner -m1 \
        | cut -d ":" -f2 \
        | cut -c2- \
        | sed 's/\s*,\s*/,/g'
  register: distinguished_name_from_keystore
  changed_when: false
  when:
    - listener['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'none'
    - listener['ssl_enabled'] | default(ssl_enabled) | bool
    - listener['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool
    - not fips_enabled | bool

- name: Set Principal - SSL Mutual Auth
  set_fact:
    kafka_broker_principal: "User:{{ distinguished_name_from_keystore.stdout if not fips_enabled|bool  else distinguished_name_from_keystore_bfkcs.stdout }}"
  when:
    - listener['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'none'
    - listener['ssl_enabled'] | default(ssl_enabled) | bool
    - listener['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool
